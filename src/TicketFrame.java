
import JSON.JSONArray;
import JSON.JSONException;
import JSON.JSONObject;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TicketFrame.java
 *
 * Created on May 15, 2012, 8:52:18 PM
 */
/**
 *
 * @author Administrator
 */
public class TicketFrame extends javax.swing.JFrame  {
    private Image winIcon;
    /** Creates new form TicketFrame */
    public TicketFrame() {
        Toolkit tools = Toolkit.getDefaultToolkit();
        winIcon = tools.getImage(getClass().getResource("/res/mario.png"));
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        statLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ticketList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(winIcon);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/OK.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Connection");

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Print.png"))); // NOI18N
        printButton.setText("Reprint");
        printButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        printButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ticketList);

        statusArea.setColumns(20);
        statusArea.setRows(5);
        jScrollPane2.setViewportView(statusArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        
        String file = (String)ticketList.getSelectedValue();
        if (file == null) return;
        
        String line = this.readFile("tickets/"+file);     
        
        if (line.equals("READ ERROR")){
            statusArea.append("ERROR Reading: "+"tickets/"+file+System.getProperty("line.separator"));
            return;
        }
        
        Order ticket = new Order(false);                    
                    try{
                        
                        JSONObject myjson = new JSONObject(line);
                        
                        JSONObject order = myjson.getJSONObject("order");
                        ticket.setOrder_id(order.getString("id"));
                        ticket.setPhone(order.getString("phone"));
                        ticket.setCarrier(order.getString("carrier"));
                        ticket.setCustomer_name(order.getString("name"));
                        ticket.setDelivery(order.getInt("delivery"));
                        ticket.setSubmitted(order.getString("submitted"));
                        ticket.setDelivery_time(order.getString("delivery_time"));
                                                
                        /* Git da muddafuckin items */
                        JSONArray order_items = myjson.getJSONArray("items");
                        int size = order_items.length();                            
                        Item item;
                        for (int i = 0; i < size; i++) {
                            item = new Item();
                            JSONObject tmpJSON = order_items.getJSONObject(i);
                            item.setId(tmpJSON.getString("id"));
                            item.setName(tmpJSON.getString("name"));
                            item.setPrice(tmpJSON.getString("price"));                                
                            ticket.addItem(item);
                        }
                        
                        /* Git da muddafuckin toppings */
                        JSONArray item_toppings = myjson.getJSONArray("toppings");
                        size = item_toppings.length();                            
                        Topping topping;
                        for (int i = 0; i < size; i++) {
                            topping = new Topping();
                            JSONObject tmpJSON = item_toppings.getJSONObject(i);
                            topping.setItem_id(tmpJSON.getString("item_id"));
                            topping.setComment(tmpJSON.getString("comment"));
                            topping.setPrice(tmpJSON.getString("price"));                                
                            ticket.addTopping(topping);
                        }                        
                        
                    }catch(JSONException e){
                        e.printStackTrace();
                    }
                    ticket.go(); //return printer status?!
                    
        
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
                new TicketFrame().setVisible(true);
                
                getTicket();
                
            }
        });
        
     
    }
    
    
    public static void getTicket(){
        
        TicketThread tt = new TicketThread(1, statusArea, ticketList, statLabel, "tickets");
        tt.start();
   
    }
   
    public static String readFile (String filename){
        
        //StringBuilder sb = new StringBuilder();
        
        try {                
            File data = new File (filename);
            if (!data.exists()) return "";
            
            FileInputStream in = new FileInputStream(data);
            BufferedInputStream bis = new BufferedInputStream( in, 4096 /* buffsize */ );  
            BufferedReader b = new BufferedReader(new InputStreamReader(bis));
            String tmp = b.readLine();
            
                                   
            bis.close();
            return tmp;
                        
        } catch (Exception e) {e.printStackTrace(); return "READ ERROR";}
        
              
    }
        
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton printButton;
    private static javax.swing.JLabel statLabel;
    private static javax.swing.JTextArea statusArea;
    private static javax.swing.JList ticketList;
    // End of variables declaration//GEN-END:variables
}